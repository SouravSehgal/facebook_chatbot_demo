'use strict';

// Messenger API integration example
// We assume you have:
// * a Wit.ai bot setup (https://wit.ai/docs/quickstart)
// * a Messenger Platform setup (https://developers.facebook.com/docs/messenger-platform/quickstart)
// You need to `npm install` the following dependencies: body-parser, express, request.
//
// 1. npm install body-parser express request
// 2. Download and install ngrok from https://ngrok.com/download
// 3. ./ngrok http 8445
// 4. WIT_TOKEN=your_access_token FB_APP_SECRET=your_app_secret FB_PAGE_TOKEN=your_page_token node examples/messenger.js
// 5. Subscribe your page to the Webhooks using verify_token and `https://<your_ngrok_io>/webhook` as callback URL.
// 6. Talk to your bot on Messenger!

const bodyParser = require('body-parser');
const crypto = require('crypto');
const express = require('express');
const fetch = require('node-fetch');
const request = require('request');
var messanger = express();
var imdb = require('imdb-api');
var mongodb = require('mongodb');
var MongoClient = mongodb.MongoClient ;
var url = 'mongodb://sourav:welcome123@jello.modulusmongo.net:27017/yjAze2bi';
let Wit = null;
let log = null;
var id;
var arr =[];
var text1;
var Latest;
var first="";
var second="";
var third="";
var fourth="";
var fifth="";
var sixth="";
var seventh="";
var eight="";
try 
{
	// if running from repo
	Wit = require('../').Wit;
	log = require('../').log;
	interactive = require('../').interactive;
}
catch (e) 
{
	Wit = require('node-wit').Wit;
	log = require('node-wit').log;
}

// Webserver parameter
const PORT = process.env.PORT || 8445;

// Wit.ai parameters
const WIT_TOKEN = "5DBZW3TJYDKUN7ZLPGX5WLB44EAAXABE";//test//5DBZW3TJYDKUN7ZLPGX5WLB44EAAXABE

//const WIT_TOKEN ="N7BD3IG4RVPRMPXMY7YFS5C67OJMOOE5"; //moviebot

// Messenger API parameters
const FB_PAGE_TOKEN = 'EAAYcZBzTJafkBANle1b4K7e6hSZACvt7qyPKwp7PQpVZC4bXDZB69T4xJEgruqaxrmB0IaNBL9LA833i1tXCYIOVyOePtloPmcrZCvQ0b9HZCLX9eyzQ1E0xzgYPChvAb1ZCyDl8vpqCZC8EEKOc61TeSOiIb5iyjbSPZA0zdOCLEoQZDZD';	
if (!FB_PAGE_TOKEN) 
{ 
	throw new Error('missing FB_PAGE_TOKEN') 
}

const FB_APP_SECRET ='fea56d20283ee2a5aff5c8a15245f582';	
if (!FB_APP_SECRET) 
{ 
	throw new Error('missing FB_APP_SECRET') 
}

const FB_VERIFY_TOKEN = 'access_token';
/*let FB_VERIFY_TOKEN = null;	
crypto.randomBytes(8, (err, buff) => 
{
	if (err) throw err;
	FB_VERIFY_TOKEN = 'access_token';
	console.log(`/webhook will accept the Verify Token "${FB_VERIFY_TOKEN}"`);
});*/

// ----------------------------------------------------------------------------
// Messenger API specific code

// See the Send API reference
// https://developers.facebook.com/docs/messenger-platform/send-api-reference
const fbMessage = (id, text) => 
{
	console.log('am in ffbMessage');
	const body = JSON.stringify(
	{
		recipient: { id },
	    	message: { text },
	});
	const qs = 'access_token=' + encodeURIComponent(FB_PAGE_TOKEN);
	return fetch('https://graph.facebook.com/me/messages?' + qs, 
	{
		method: 'POST',
	    	headers: {'Content-Type': 'application/json'},
	    	body,
	})
	.then(rsp => rsp.json())
	.then(json => {
		if (json.error && json.error.message) 
		{
	      		throw new Error(json.error.message);
	    	}
	    	return json;
	});
};
/*fbReq(opts, (err, resp, data) => 
{
	console.log('am in fbReq');
	if (cb) 
	{
		cb(err || data.error && data.error.message, data);
	}
});
};*/

// ----------------------------------------------------------------------------
// Wit.ai bot specific code

// This will contain all user sessions.
// Each session has an entry:
// sessionId -> {fbid: facebookUserId, context: sessionState}

const sessions = {};

const findOrCreateSession = (fbid) => 
{
	let sessionId;
	// Let's see if we already have a session for the user fbid
	Object.keys(sessions).forEach(k => 
	{
		if (sessions[k].fbid === fbid) 
		{
	      		// Yep, got it!
	      		sessionId = k;
	    	}
	});
	if (!sessionId) 
	{
		// No session found for user fbid, let's create a new one
	    	sessionId = new Date().toISOString();
	    	sessions[sessionId] = {fbid: fbid, context: {}};
	}
		return sessionId;
};

// Our bot actions
const actions = 
{
	send({sessionId}, {text}) 
	{
		// Our bot has something to say!
	    	// Let's retrieve the Facebook user whose session belongs to
	    	console.log('the sessionId is',sessions[sessionId]);
	    	console.log('the sessionId is',{text});
	    	const recipientId = sessions[sessionId].fbid;
	    	id = recipientId;
	    	console.log('recipient id is ',id);
	    	//const {sessionId, context, entities} = request;
	    	if (recipientId) 
		{
	      		// Yay, we found our recipient!
	      		// Let's forward our bot response to her.
	      		// We return a promise to let our bot know when we're done sending
	      		console.log('I called it from actions');
	      		console.log('the received text in action is',text)
	      		return fbMessage(recipientId, text)
	      		.then(() => null)
	      		.catch((err) => 
			{
	        		console.error('Oops! An error occurred while forwarding the response to',recipientId,':',err.stack || err);
	      		});
	    	} 
		else 
		{
	      		console.error('Oops! Couldn\'t find user for session:', sessionId);
	      		// Giving the wheel back to our bot
	      		return Promise.resolve()
	    	}
	},
	// You should implement your custom actions here
	// See https://wit.ai/docs/quickstart
	getmovielist({context, entities}) 
	{
		console.log('am in getmovielist');
	  	console.log('the entit value is',entities);
	  	//console.log('the entit length is',entities.genere.length);
	  	//console.log('the movie name is',entities.movie_name[0].value);
	   	//console.log('the movie name is',entities.genre[0].value);
	   	//console.log('the movie name is',entities.number[0].value);//genere
	   	text1 = entities.genere[0].value+",";
	   	for(var i =1;i<entities.genere.length;i++)
		{ 
	   		console.log(entities.genere[i].value);
	   	  	text1 += entities.genere[i].value + ", ";
	   	}
	   	//console.log('the final text is',text1)
	  	console.log('recipient id is getmovielist',id);
	  	// console.log(sessions[sessionId].fbid);
	    	return new Promise(function(resolve, reject) 
		{
	      		Latest = text1.substring(0, text1.length-1);
	      		console.log('the final text is',Latest);
	      		if (Latest) 
			{
	        		//context.forecast = 'sunny in ' + location; // we should call a weather API here
	        		//GenericmovieInfo(id,Latest);
	        		//connect_to_db(Latest,id)
	       			// context.arr = arr[0]+"\n2."+arr[1]+"\n3."+arr[2]+"\n4."+arr[3];/*connect_to_db(Latest,id)*/;
	        		/* arr.push("nan");
	         		arr.push("nan");
	         		arr.push("nan");
	         		arr.push("nan");
	         		/*context.arr = sendQuickReply(id,Latest,arr)*/
	        		context.arr = movieInfo(id,Latest);
	        		delete context.missingLocation;
	      		}
 			else 
			{
	        		context.missingLocation = true;
	        		delete context.forecast;
	      		}
	      		return resolve(context);
		});
	},
};

// Setting up our bot
const wit = new Wit({
	accessToken: WIT_TOKEN,
	actions,
	logger: new log.Logger(log.INFO)
});

// Starting our webserver and putting it all together
const app = express();
app.use(({method, url}, rsp, next) => {
	rsp.on('finish', () => {
		console.log(`${rsp.statusCode} ${method} ${url}`);
	 });
	 next();
});

app.use(bodyParser.json({ verify: verifyRequestSignature }));

// Webhook setup
app.get('/webhook', (req, res) => 
{
	if (req.query['hub.mode'] === 'subscribe' &&
	    req.query['hub.verify_token'] === FB_VERIFY_TOKEN) 
	{
		res.send(req.query['hub.challenge']);
	} 
	else 
	{
		res.sendStatus(400);
	}
});

// Message handler
app.post('/webhook', (req, res) => 
{
	// Parse the Messenger payload
	// See the Webhook reference
	// https://developers.facebook.com/docs/messenger-platform/webhook-reference
	const data = req.body;
	console.log('data.object',data.object);
	if (data.object === 'page') 
	{
		data.entry.forEach(entry => 
		{
	      		entry.messaging.forEach(event => 
			{
	        		if (event.message && !event.message.is_echo) 
				{
	          			// Yay! We got a new message!
	          			// We retrieve the Facebook user ID of the sender
	          			const sender = event.sender.id;
	          			console.log('the sender id is',sender);
	           			console.log('the  id is',id);
	          			// We retrieve the user's current session, or create one if it doesn't exist
	          			// This is needed for our bot to figure out the conversation history
	          			const sessionId = findOrCreateSession(sender);
	          			console.log('the echo is',event.message.is_echo);
	          			// We retrieve the message content
	          			const {text, attachments} = event.message;  
	          			if (attachments) 
					{
	            				// We received an attachment
	            				// Let's reply with an automatic message
	            				fbMessage(sender, 'Sorry I can only process text messages for now.')
	            				.catch(console.error);
	          			} 
					else if (text) 
					{
	          				console.log('the text message is',text);
	            				var message = event.message;
						var quickReply = message.quick_reply;
						console.log('the quick reply is',quickReply);
						if(quickReply)
						{
							if(text==1)
							{    
								console.log("tpped 1");
								GenericmovieInfo(id,first);
							}
							else if (text==2) 
							{
								console.log("tpped 2"); 
								GenericmovieInfo(id,second);
							}						
							else if (text==3) 
							{
								console.log("tpped 3"); 
								GenericmovieInfo(id,third);
							}
							else if (text==4) 
							{
								console.log("tpped 4"); 
								GenericmovieInfo(id,fourth);
							}
							else if (text==="more") 
							{
								console.log("tpped more"); 
								moreMovie(id,Latest);
							}
							else if (text==="Back") 
							{
								console.log("tpped Back"); 
								Backmovies(id,Latest);
							}
							else if (text==5) 
							{
								console.log("tpped 5"); 
								GenericmovieInfo(id,fifth);
							}
							else if (text==6) 
							{
								console.log("tpped 6");
								GenericmovieInfo(id,sixth);
							}
							else if (text==7) 
							{
								console.log("tpped 7");
								GenericmovieInfo(id,seventh);
							}
							else if (text==8) 
							{
								console.log("tpped 8");
								GenericmovieInfo(id,eight);
							}
						}
	            				wit.runActions
						(
	              					sessionId, // the user's current session
	              					text, // the user's message
	              					sessions[sessionId].context // the user's current session state
	            				).then((context) => 
						{
	              					// Our bot did everything it has to do.
	              					// Now it's waiting for further messages to proceed.
	              					console.log('Waiting for next user messages');

	              					// Based on the session state, you might want to reset the session.
	              					// This depends heavily on the business logic of your bot.
	              					// Example:
	               					if (context['ok']) 
							{
	                					delete sessions[sessionId];
	               					}

	              					// Updating the user's current session state
	              					sessions[sessionId].context = context;
	            				})
	            				.catch((err) => 
						{
	              					console.error('Oops! Got an error from Wit: ', err.stack || err);
	            				})
	          			}
	        		} 
				else 
				{
	          			console.log('received event', JSON.stringify(event));
	        
	          			/* data.entry.forEach(function(pageEntry) 
					{
						var pageID = pageEntry.id;
						var timeOfEvent = pageEntry.time;

						// Iterate over each messaging event
						pageEntry.messaging.forEach(function(messagingEvent) 
						{
							if (messagingEvent.optin) 
							{
								receivedAuthentication(messagingEvent);
							} 
							else if (messagingEvent.message) 
							{
								receivedMessage(messagingEvent);
							} 
							else if (messagingEvent.delivery) 
							{
								receivedDeliveryConfirmation(messagingEvent);
							} 
							else if (messagingEvent.postback) 
							{
								receivedPostback(messagingEvent);
							} 
							else if (messagingEvent.read) 
							{
								receivedMessageRead(messagingEvent);
							} 
							else if (messagingEvent.account_linking) 
							{
								receivedAccountLink(messagingEvent);
							} 
							else 
							{
								console.log("Webhook received unknown messagingEvent: ", messagingEvent);
							}
						});
					});*/
	        		}
	      		});//entry.messaging for each
	    	});//data.entry for each
	}
	res.sendStatus(200);
});

/*
* Verify that the callback came from Facebook. Using the App Secret from
* the App Dashboard, we can verify the signature that is sent with each
* callback in the x-hub-signature field, located in the header.
*
* https://developers.facebook.com/docs/graph-api/webhooks#setup
*
*/
function receivedMessage(event) 
{
	var senderID = event.sender.id;
	var recipientID = event.recipient.id;
	var timeOfMessage = event.timestamp;
	var message = event.message;

	console.log("Received message for user %d and page %d at %d with message:", senderID, recipientID, timeOfMessage);
	console.log(JSON.stringify(message));

	var isEcho = message.is_echo;
	var messageId = message.mid;
	var appId = message.app_id;
	var metadata = message.metadata;

	// You may get a text or attachment but not both
	var messageText = message.text;
	var messageAttachments = message.attachments;
	var quickReply = message.quick_reply;
	console.log('the received message is ',isEcho,quickReply);
	if (isEcho) 
	{
		// Just logging message echoes to console
	    	console.log("Received echo for message %s and app %d with metadata %s", messageId, appId, metadata);
	    	return;
	} 
	else if (quickReply) 
	{
		var quickReplyPayload = quickReply.payload;
	    	console.log("Quick reply for message %s with payload %s",messageId, quickReplyPayload);
	    	// console.log('movies list is ',myFile.movielist());
	     	switch (messageText) 
		{
	        	case '1':
	          		GenericmovieInfo(senderID, arr[0]);
	           		break;
	         	case '2':
	            		GenericmovieInfo(senderID, arr[1]);
	             		break;
	          	case '3':
	            		GenericmovieInfo(senderID, arr[2]);
	            		break;
	          	case '4':
	            		GenericmovieInfo(senderID, arr[3]);
	            		break;
	          	case '5':
	            		GenericmovieInfo(senderID, arr[4]);
	            		break;
	          	case '6':
	            		GenericmovieInfo(senderID, arr[5]);
	            		break;
	          	case '7':
	            		GenericmovieInfo(senderID, arr[6]);
	            		break;
	          	case '8':
	            		GenericmovieInfo(senderID, arr[7]);
	            		break;
	          	case 'show More':
	          	 	//j =j+4;
	          	 	console.log('tapped show more');
	          	 	//sendQuickReply(senderID,messageText,arr,4);
	             		sendMore(senderID,messageText,arr);
	          	  	break;
	      	}
	     	return;
	}  
	if (messageText) 
	{
		/*if(messageText.includes("drama"))
		{ 
	      		arr=myFile.movielist();
	      		console.log('arr of Drama is',arr);
	    	} 
		else if(messageText.includes("comedy"))
		{
	      		arr=myFile.movielist_comedy();
	      		console.log('arr of Comedy is',arr);
	    	}
	    	else if(messageText.includes("action"))
		{
	      		arr=myFile.movielist_action();
	      		console.log('arr of action is',arr);
	    	}*/
	    	// If we receive a text message, check to see if it matches any special
	    	// keywords and send back the corresponding example. Otherwise, just echo
	    	// the text we received.
	    	switch (messageText) 
		{
	      		case 'image':
	        		sendImageMessage(senderID);
	        		break;
	      		case 'gif':
	        		sendGifMessage(senderID);
	        		break;
	      		case 'audio':
	        		sendAudioMessage(senderID);
	        		break;
	      		case 'video':
	        		sendVideoMessage(senderID);
	        		break;
	      		case 'file':
	        		sendFileMessage(senderID);
	        		break;
	      		case 'button':
	        		sendButtonMessage(senderID);
	        		break;
	      		case 'generic':
	        		sendGenericMessage(senderID);
	        		break;
	      		case 'receipt':
	        		sendReceiptMessage(senderID);
	        		break;
	      		case 'quick reply':
	        		sendQuickReply(senderID,messageText,arr);
	        		break; 
	     		/* case 'comedy':
	        		sendQuickReply(senderID,messageText,arr);
	        		break;        
	      		case 'drama':
	        		sendQuickReply(senderID,messageText,arr);
	       			 break; 
	      		case 'action':
	        		sendQuickReply(senderID,messageText,arr);
	        		break;  */
	      		case 'read receipt':
	        		sendReadReceipt(senderID);
	        		break;        
	      		case 'typing on':
	        		sendTypingOn(senderID);
	        		break;        
	      		case 'typing off':
	        		sendTypingOff(senderID);
	        		break;        
	      		case 'account linking':
	        		sendAccountLinking(senderID);
	        		break;
	      		default:
	        		//sendTextMessage(senderID, messageText);
	        		//GenericmovieInfo(senderID, messageText);
	        		connect_to_db(messageText,senderID);
	        		console.log('the user messageText is',messageText);
	        		/*setTimeout(function() { arr =  myFile.movielist_action();  j =0;
	        		sendQuickReply(senderID,messageText,arr,0);
	        		console.log('arr of movies is',arr);}, 5000);*/
	        		//console.log('arr of movies is',arr);
	       
		}
	} 
	else if (messageAttachments) 
	{
		sendTextMessage(senderID, "Message with attachment received");
	}
}
function receivedAuthentication(event) 
{
	var senderID = event.sender.id;
	var recipientID = event.recipient.id;
	var timeOfAuth = event.timestamp;

	// The 'ref' field is set in the 'Send to Messenger' plugin, in the 'data-ref'
	// The developer can set this to an arbitrary value to associate the 
	// authentication callback with the 'Send to Messenger' click event. This is
	// a way to do account linking when the user clicks the 'Send to Messenger' 
	// plugin.
	var passThroughParam = event.optin.ref;

	console.log("Received authentication for user %d and page %d with pass " +
	    "through param '%s' at %d", senderID, recipientID, passThroughParam, 
	    timeOfAuth);

	// When an authentication is received, we'll send a message back to the sender
	// to let them know it was successful.
	sendTextMessage(senderID, "Authentication successful");
}
function receivedDeliveryConfirmation(event) 
{
	var senderID = event.sender.id;
	var recipientID = event.recipient.id;
	var delivery = event.delivery;
	var messageIDs = delivery.mids;
	var watermark = delivery.watermark;
	var sequenceNumber = delivery.seq;
	if (messageIDs) 
	{
		messageIDs.forEach(function(messageID) 
		{
	      		console.log("Received delivery confirmation for message ID: %s", messageID);
	    	});
	}
	console.log("All message before %d were delivered.", watermark);
}
function receivedPostback(event) 
{
	var senderID = event.sender.id;
	var recipientID = event.recipient.id;
	var timeOfPostback = event.timestamp;

	// The 'payload' param is a developer-defined field which is set in a postback 
	// button for Structured Messages. 
	var payload = event.postback.payload;
	console.log("Received postback for user %d and page %d with payload '%s' " + 
	    	"at %d", senderID, recipientID, payload, timeOfPostback);
	// When a postback is called, we'll send a message back to the sender to 
	// let them know it was successful
	sendTextMessage(senderID, "Postback called");
}
function receivedMessageRead(event) 
{
	var senderID = event.sender.id;
	var recipientID = event.recipient.id;

	// All messages before watermark (a timestamp) or sequence have been seen.
	var watermark = event.read.watermark;
	var sequenceNumber = event.read.seq;
	https://botsify.com/bot/webhook/BXlQITM6TFzhJb6BlKp1
	console.log("Received message read event for watermark %d and sequence " +
	    	"number %d", watermark, sequenceNumber);
}
function receivedAccountLink(event) 
{
	var senderID = event.sender.id;
	var recipientID = event.recipient.id;

	var status = event.account_linking.status;
	var authCode = event.account_linking.authorization_code;

	console.log("Received account link event with for user %d with status %s " +
	    	"and auth code %s ", senderID, status, authCode);
}
function sendTextMessage(recipientId, messageText) 
{
	var messageData = 
	{
		recipient: 
		{
	      		id: recipientId
	    	},
	    	message: 
		{
	      		text: messageText,
	     	 	metadata: "DEVELOPER_DEFINED_METADATA"
	    	}
	};
	callSendAPI(messageData);
}
function Backmovies(recipientId,messageText) 
{
	var messageData = 
	{
		recipient: 
		{
	      		id: recipientId
	    	},
	    	message: 
		{
	      		text: "Here are previous "+messageText+" recommendations for you.\n1."+first+"\n2."+second+"\n3."+third+"\n4."+fourth,
	      		metadata: "DEVELOPER_DEFINED_METADATA",
	      		quick_replies: [
	        	{
	          		"content_type":"text",
	          		"title":1,
	          		"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_ACTION"
	        	},
	        	{
	          		"content_type":"text",
	          		"title":2,
	          		"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_COMEDY"
	        	},
	        	{
	          		"content_type":"text",
	          		"title":3,
	          		"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_DRAMA"
	        	},
	        	{
	          		"content_type":"text",
	          		"title":4,
	          		"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_DRAMA"
	        	},
	        	{
	          		"content_type":"text",
	          		"title":"show More",
	          		"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_DRAMA"
	        	}]
		}
	};
	callSendAPI(messageData);
}
function moreMovie(recipientId,messageText) 
{
	var i =i;
	//console.log('arr is',arr[i],arr[i+1],arr[i+2],arr[i+3]);
	var messageData = 
	{
		recipient: 
		{
	      		id: recipientId
	    	},
	    	message: 
		{
	      		text: "Some more recommendations for "+messageText+" you.\n5."+fifth+"\n6."+sixth+"\n7."+seventh+"\n8."+eight,
	      		metadata: "DEVELOPER_DEFINED_METADATA",
	      		quick_replies: [
	        	{
	          		"content_type":"text",
	          		"title":"Back",
	          		"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_ACTION"
	        	},
	        	{
	          		"content_type":"text",
	          		"title":5,
	          		"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_ACTION"
	        	},
	        	{
	          		"content_type":"text",
	          		"title":6,
	         	 	"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_COMEDY"
	        	},
	        	{
	          		"content_type":"text",
	          		"title":7,
	          		"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_DRAMA"
	        	},
	        	{
	          		"content_type":"text",
	          		"title":8,
	          		"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_DRAMA"
	        	}]
		}
	};
	callSendAPI(messageData);
}
function callSendAPI(messageData) 
{
	console.log('my message is',messageData);
	request({
		uri: 'https://graph.facebook.com/v2.6/me/messages',
	    	qs: { access_token: FB_PAGE_TOKEN },
	   	method: 'POST',
	    	json: messageData
	}, 
	function (error, response, body) 
	{
		if (!error && response.statusCode == 200) 
		{
	      		var recipientId = body.recipient_id;
	      		var messageId = body.message_id;

	      		if (messageId) 
			{
	         		console.log("Successfully sent message with id %s to recipient %s", 
	          		messageId, recipientId);
	      		} 
			else 
			{
	      			console.log("Successfully called Send API for recipient %s", 
	        		recipientId);
	      		}
	    	} 
		else 
		{
	      		console.error('callSendAPI message of error is',response.error);
	    	}
	});  
}
function GenericmovieInfo(senderID,messageText)
{
	//var movies;
	imdb.getReq({ name:messageText }, function(err, things) 
	{
		if (err) 
		{
	      		console.error('Oops!!! No movie found with that name.\nCheck your spelling or try some other Popular Movie.\n', err);
	      		var messageData = 
			{
	       			recipient: 
				{
	       				id: senderID
	   	 		},
	    			message: 
				{
	      				text:"Oops!!! No movie found with that name.\nCheck your spelling or try some other Popular Movie.\n"
	         		}
	  		}
	  		callSendAPI(messageData);
	   		return;
	  	}
		console.log('the movie name is' , messageText);
		var releseDate=things.released;
		var actors=things.actors;
		var geners=things.genres;
		var director=things.director;
		var writer=things.writer;
		var rating=things.rating;
		var language = things.languages;
		console.log('the movie language is',language);
		if(rating.includes("N/A"))
		{
			rating = "no rating";
		}
		var story=things.plot;
		if(story.includes("N/A"))
		{
			story = "Sorry the stroy is unavialable for this movie";
		}
		var title=things.title;
		var poster=things.poster;
		console.log("imdb poster is", poster);
		if(poster.includes("N/A"))
		{
			poster ="http://ia.media-imdb.com/images/M/MV5BMjAzOTcxMDA2Nl5BMl5BcG5nXkFtZTcwMTc1MzIzOA@@._V1_.png";
		}
		var imdburl=things.imdburl;
		console.log("The imdb details is ","releseDate is" +releseDate,"actors are"+actors,"geners is"+geners,"director is"+director,"writer is"+writer,"story is"+story,"title is"+title,"poster is "+poster,"imdburl is"+imdburl);
	
		var messageData = 
		{
			recipient: 
			{
	      			id:senderID
	    		},
	    		message: 
			{
	      			attachment: 
				{
	        			type: "template",
	        			payload: 
					{
	          				template_type: "generic",
	          				elements: 
						[{
	            					title: title,
	            					subtitle:"Ratings:"+rating+"\n\nActors:"+actors+"\n\nStory:"+story,
	            					item_url:imdburl,               
	            					//text:"Ratings:"+rating+"\n\nActors:"+actors+"\n\nStory:"+story,
	            					image_url:poster,
	            					buttons: 
							[{
	              						type: "web_url",
	              						url: imdburl,
	              						title: "More Details"
	            					}]
	          				}, 
						{
	            					title: "Story",
	            					subtitle: story,
	            					//item_url: "https://www.oculus.com/en-us/touch/",               
	            					//image_url: SERVER_URL + "/assets/touch.png",
	            				}]
	        			}
	      			}
	    		}
		};  
		callSendAPI(messageData);
	});
}
const firstEntityValue = (entities, entity) => 
{
	console.log(entity);
	const val = entities && entities[entity] && Array.isArray(entities[entity]) && entities[entity].length > 0 &&entities[entity][0].value;
	if (!val) 
	{
		return null;
	}
	return typeof val === 'object' ? val.value : val;
};
const getFirstMessagingEntry = (body) => 
{
	console.log('am in getFirstMessagingEntry');
	const val = body.object === 'page' && body.entry && Array.isArray(body.entry) && body.entry.length > 0 && body.entry[0] &&
			body.entry[0].messaging && Array.isArray(body.entry[0].messaging) && body.entry[0].messaging.length > 0 &&
			body.entry[0].messaging[0];
	return val || null;
};
function movieInfo(senderID, messageText)
{
	MongoClient.connect(url, function (err, db) 
	{
		if (err) 
		{
			console.log('Unable to connect to the mongoDB server. Error:', err);
		} 
		else 
		{
			//HURRAY!! We are connected. :)
	    		console.log('Connection established to', url);

	    		// Get the documents collection
	   		var collection = db.collection('movies');

	    		console.log("------------>"+messageText+"<-----------------");
	    		//db.users.find({"genres" : /.*action.*/i}).pretty();
	    		//var cursor= collection.find({"genres" : /.*action.*/i}).limit(15);
	   		// var cursor= collection.find({genres:{'$regex' : messageText, '$options' : 'i'}}).limit(15);
    			//{title:{'$regex' : messageText, '$options' : 'i'}},
	    		var cursor= collection.find(
	        	{
				$and:
	                	[
	                		{
						genres:{'$regex' : messageText, '$options' : 'i'}
					},
	                      		{
						"rating" :{$gt : '7'}
					}
	                	]
	        	}).limit(15);
			cursor.toArray(function(err, docs) 
			{    
	    			//collection.find({}, {genres:messageText,limit:5}).toArray(function(err, docs) {            
	          		console.log("Returned #" + docs.length + " documents");
	           		first=docs[0]['title'] ? docs[0]['title']: null ;
	          		second=docs[1]['title'] ? docs[1]['title']: null ;
	           		third=docs[2]['title'] ? docs[2]['title']: null ;
	           		fourth=docs[3]['title'] ? docs[3]['title']: null ;
	           		fifth=docs[4]['title'] ? docs[4]['title']: null ;
	           		sixth=docs[5]['title'] ? docs[5]['title']: null ;
	           		seventh=docs[6]['title'] ? docs[6]['title']: null ;
	           		eight=docs[7]['title'] ? docs[7]['title']: null ;
	           		first.trim();
	           		second.trim();
	           		third.trim();
	           		fourth.trim();
	           		fifth.trim();
	           		sixth.trim();
	           		seventh.trim();
	           		eight.trim();
	           		var messageData = 
				{
	    				recipient: 
					{
	      					id: senderID
	    				},
	    				message: 
					{
	      					text: "Here are some "+messageText+" recommendations for you.\n1."+first+"\n2."+second+"\n3."+third+"\n4."+fourth,
	      					metadata: "DEVELOPER_DEFINED_METADATA",
	      					quick_replies: [
	        				{
	          					"content_type":"text",
	          					"title":"1",
	          					"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_ACTION"
	        				},
	        				{
	          					"content_type":"text",
	         					"title":"2",
	          					"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_COMEDY"
	        				},
	        				{
	          					"content_type":"text",
	          					"title":"3",
	         	 				"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_DRAMA"
	        				},
	        				{
	          					"content_type":"text",
	          					"title":"4",
	          					"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_HORROR"
	        				},
	        				{
	          					"content_type":"text",
	          					"title":"more",
	          					"payload":"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_More"
	        				}]	
	    				}
	  			};
				console.log(messageData.message);
				console.log(messageData.recipient);
				callSendAPI(messageData); 
			});
		}
		db.close();
	});
}
function verifyRequestSignature(req, res, buf) 
{
	var signature = req.headers["x-hub-signature"];
	if (!signature) 
	{
		// For testing, let's log an error. In production, you should throw an
	    	// error.
	    	console.error("Couldn't validate the signature.");
	} 
	else 
	{
		var elements = signature.split('=');
	    	var method = elements[0];
	    	var signatureHash = elements[1];

	    	var expectedHash = crypto.createHmac('sha1', FB_APP_SECRET).update(buf).digest('hex');

	    	if (signatureHash != expectedHash) 
		{
	      		throw new Error("Couldn't validate the request signature.");
	    	}
	}
}

app.listen(PORT);
console.log('Listening on :' + PORT + '...');
/*module.exports = messanger;*/
module.exports = 
{
	getFirstMessagingEntry: getFirstMessagingEntry,
	fbMessage: fbMessage,
};
